{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My-Cyber-Knowledge","text":"<p>This is my cyber security acknowlege wiki.</p>"},{"location":"#section-breakdown","title":"Section Breakdown","text":"<ul> <li>Usefull Tools and Software</li> <li>Github</li> <li>Forensic</li> <li>OSINT</li> <li>SIEM<ul> <li>Wazuh</li> </ul> </li> <li>CheatSheets<ul> <li>Vim</li> <li>Linux</li> </ul> </li> </ul>"},{"location":"forensic/","title":"Forensic","text":"<p>Forensics is the application of scientific methods and techniques to investigate crimes and gather evidence that can stand up in a court of law. It spans multiple disciplines, including digital forensics, forensic biology, forensic chemistry, and forensic anthropology. By methodically analyzing data and artifacts, forensic experts play a crucial role in solving crimes and ensuring justice.</p>"},{"location":"forensic/#tools","title":"Tools","text":"<ul> <li><code>dd.exe</code> - dd.exe is a Windows port of the classic Unix disk cloning and imaging tool.</li> <li><code>winpmem.exe</code> - WinPmem is a powerful memory acquisition tool designed for Windows systems.</li> <li><code>TestDisk</code> - TestDisk checks the partition and boot sectors of your disks. It is very useful in recovering lost partitions.</li> <li><code>PhotoRec</code> - PhotoRec is file data recovery software designed to recover lost pictures from digital camera memory or even hard disks.</li> <li><code>Volatility</code> - The Volatility Framework is a completely open collection of tools, implemented in Python under the GNU General Public License, for the extraction of digital artifacts from volatile memory (RAM) samples.</li> </ul>"},{"location":"forensic/#dd","title":"dd","text":""},{"location":"forensic/#winpmem","title":"WinPmem","text":""},{"location":"forensic/#testdisk","title":"TestDisk","text":""},{"location":"forensic/#photorec","title":"PhotoRec","text":""},{"location":"forensic/#volatility","title":"Volatility","text":""},{"location":"github/","title":"Github","text":""},{"location":"github/#generate-new-ssh-key","title":"Generate new ssh key","text":"<pre><code>$ ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre>"},{"location":"github/#commits-manipulations","title":"Commits manipulations","text":""},{"location":"github/#go-back-to-a-commit","title":"Go back to a commit","text":"<p>Go back to a commit with staged changes with the following command :</p> <pre><code>$ git reset --soft &lt;commit hash&gt;\n</code></pre> <p>Go back to a commit without the staged changes with the following command :</p> <pre><code>$ git reset --hard &lt;commit hash&gt;\n</code></pre> <p>Notes that a force-pushing will be required to override the history.</p>"},{"location":"github/#edit-commits-information","title":"Edit commits information","text":"<p>Updating the last Commit</p> <p>You can change your past commit information such as author, message, etc..</p> <pre><code>$ git commit --amend\n</code></pre> <p>The command above loads the previous commit message into an editor session, where you can make changes to the message, save those changes and exit. When you save and close the editor, the editor writes a new commit containing that updated commit message and makes it your new last commit.</p> <p>Updating Multiple Commits</p> <p>To modify multiple commits, combine <code>commit --amend</code> with <code>rebase</code>:</p> <pre><code>$ git rebase -i &lt;commit hash&gt;\n</code></pre> <p>When using interactive rebase, you will be presented with a list of commits. You can choose actions (commands) to apply to each commit. To amend a commit, use the <code>edit</code> command.</p> <p>After saving and exiting the interactive editor, Git will stop at the commit marked for editing. You might see something like this:</p> <pre><code>$ git rebase -i HEAD~3\nStopped at f7f3f6d... Change my name a bit\nYou can amend the commit now, with\n\n       git commit --amend\n\nOnce you're satisfied with your changes, run\n\n       git rebase --continue\n</code></pre> <p>Repeat the process for each <code>edit</code> until the rebase is complete.</p> <p>Notes:</p> <ul> <li>Force-pushing (<code>git push --force</code>) will be required after amending or rebasing.</li> <li><code>&lt;commit hash&gt;</code> can be replaced by <code>HEAD~x</code> (e.g. <code>HEAD~3</code>) to get the last <code>x</code> commits.</li> </ul>"},{"location":"github/#workflows","title":"Workflows","text":"<p>GitHub workflows are automated processes defined in YAML files that enable developers to streamline tasks such as code building, testing, deployment, and custom automation based on events like code pushes or pull requests.</p>"},{"location":"github/#structure","title":"Structure","text":"<p>Your workflows must be located in <code>.github/workflows</code> directory.</p> <pre><code>.\n\u251c\u2500\u2500 .git/\n    \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 .github/\n    \u2514\u2500\u2500 workflows/\n        \u2514\u2500\u2500 &lt;your_workflow&gt;.yml\n...\n</code></pre>"},{"location":"github/#yaml-file-structure","title":"Yaml file structure","text":"<p>To set up a valid GitHub workflow, you must include some required parameters in your YAML file. Below are key parameters and their descriptions:</p> <p><code>name</code> : The name of the workflow. This is a descriptive identifier for the workflow that appears in the GitHub Actions UI.</p> <p><code>on</code> : Specifies the events that trigger the workflow. Common events are <code>push</code>, <code>pull_request</code>, and custom events.</p> <p><code>on.push.branches</code> : Specifies which branches trigger the workflow on push events.</p> <p><code>env</code> : Defines environment variables that are available to all jobs and steps in the workflow.</p> <p><code>jobs</code> : A collection of jobs to be executed in the workflow. Each job can run on a specific environment and container.</p> <p><code>jobs.&lt;your_job&gt;.runs-on</code> : Specifies the type of machine to run the job on. Common options are <code>ubuntu-latest</code>, <code>windows-latest</code>, and <code>macos-latest</code>.</p> <p><code>jobs.&lt;your_job&gt;.container</code> : Defines the container environment for the job. This is useful for running jobs in a custom Docker image.</p> <p><code>jobs.&lt;your_job&gt;.steps</code> : Defines the individual steps to be executed in the job. Each step can run commands, use actions, or set up environments.</p> <p>To fail a job's step manually, you can <code>exit 1</code> when running a command.</p> <p>Here is a structure of a github workflow yaml file :</p> <pre><code>name: &lt;workflow_name&gt;\n\non:\n  push:\n    branches:\n      - &lt;branch1&gt;\n      - &lt;branch2&gt;\n  pull_request:\n    branches:\n      - &lt;branch1&gt;\n      - &lt;branch2&gt;\n\nenv:\n  ENV_KEY: &lt;value&gt;\n\njobs:\n  &lt;your_job_name&gt;:\n    runs-on: &lt;chosen_os&gt;\n    container:\n      image: &lt;chosen_image&gt;\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - name: &lt;your_step_name_1&gt;\n        run: &lt;your_command&gt;\n      - name: &lt;your_step_name_2&gt;\n        timeout-minutes: 2\n        run: &lt;your_command&gt;\n\n  &lt;your_job_2&gt;:\n  ...\n</code></pre> <p>Here is an exemple of a basic github workflow :</p> <pre><code>name: Makefile CI\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: configure\n      run: ./configure\n\n</code></pre>"},{"location":"github/#actions-secrets","title":"Actions secrets","text":"<p>Secrets and variables allow you to manage reusable configuration data. Secrets are encrypted and are used for sensitive data.</p> <p>You can found your secrets at <code>Your Repository overview</code> -&gt; <code>Settings</code> -&gt; <code>Secrets and Variables</code> -&gt; <code>Actions</code>.</p> <p>To call a secret you have to use this syntaxe : <code>${{ secrets.YOUR_SECRET }}</code>.</p> <p>More documentation on github.</p>"},{"location":"osint/","title":"OSINT","text":""},{"location":"usefull_tools_and_software/","title":"Usefull Tools and Software","text":""},{"location":"usefull_tools_and_software/#mkdocs","title":"Mkdocs","text":"<p>MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p> <p></p> <p></p>"},{"location":"usefull_tools_and_software/#marp","title":"Marp","text":"<p>Marp (also known as the Markdown Presentation Ecosystem) provides an intuitive experience for creating beautiful slide decks. You only have to focus on writing your story in a Markdown document.</p> <p></p> <p></p>"},{"location":"usefull_tools_and_software/#ventoy","title":"Ventoy","text":"<p>Ventoy is an open source tool to create bootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files. With ventoy, you don't need to format the disk over and over, you just need to copy the ISO/WIM/IMG/VHD(x)/EFI files to the USB drive and boot them directly.</p> <p></p> <p></p>"},{"location":"cheatsheets/linux/","title":"Linux notes","text":""},{"location":"cheatsheets/linux/#how-to-configure-a-hostname-on-a-linux","title":"How to configure a hostname on a Linux","text":"<p>Modify the system's name temporarily</p> <pre><code>hostname demo.example.com\n</code></pre> <p>Modify the system's name permanently</p> <pre><code>hostnamectl set-hostname demo.example.com\n\n</code></pre> <p>You can confirm this entry by displaying the <code>/etc/hostname</code> file contents.</p>"},{"location":"cheatsheets/linux/#set-static-ip-address","title":"Set static ip address","text":"<p>Edit the network configuration:</p> <pre><code>sudo nano /etc/network/interfaces\n</code></pre> <p>Add or modify the following lines:</p> <pre><code>allow-hotplug ethX\niface ethX inet static\n    address 192.168.x.x\n    netmask 255.255.255.0\n    gateway 192.168.x.x\n</code></pre> <p>Restart networking:</p> <pre><code>sudo systemctl restart networking\n</code></pre>"},{"location":"cheatsheets/vim/","title":"Vim CheatSheet","text":""},{"location":"siem/wazuh/","title":"Wazuh","text":"<p>https://documentation.wazuh.com/current/installation-guide/wazuh-indexer/step-by-step.html</p> <p>https://documentation.wazuh.com/current/installation-guide/wazuh-server/step-by-step.html</p> <p>https://documentation.wazuh.com/current/installation-guide/wazuh-dashboard/step-by-step.html</p> <p>https://documentation.wazuh.com/current/installation-guide/wazuh-agent/wazuh-agent-package-linux.html</p> <p>https://documentation.wazuh.com/current/installation-guide/wazuh-agent/wazuh-agent-package-windows.html</p> <p>https://documentation.wazuh.com/current/installation-guide/wazuh-agent/wazuh-agent-package-macos.html</p>"}]}